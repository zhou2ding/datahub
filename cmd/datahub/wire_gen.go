// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"datahub/internal/biz"
	"datahub/internal/conf"
	"datahub/internal/data"
	"datahub/internal/server"
	"datahub/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, confLog *conf.Log, logger log.Logger) (*kratos.App, func(), error) {
	v, err := data.NewDatabase(confData, confLog, logger)
	if err != nil {
		return nil, nil, err
	}
	redisClient, err := data.NewRedisClients(confData, confLog, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(confData, logger, v, redisClient)
	if err != nil {
		return nil, nil, err
	}
	datalayerRepo := data.NewDatalayerRepo(dataData, logger)
	bizDatalayerRepo := data.NewCachingDatalayerRepo(datalayerRepo, redisClient, logger)
	datalayerUseCase := biz.NewDatalayerUseCase(bizDatalayerRepo, logger)
	datalayerService := service.NewDatalayerService(datalayerUseCase)
	grpcServer := server.NewGRPCServer(confServer, datalayerService, logger)
	app := newApp(logger, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
