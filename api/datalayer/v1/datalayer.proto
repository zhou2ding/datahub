syntax = "proto3";

package datalayer.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";


option go_package = "datalayer/v1;v1";

// --- Service Definitions ---

// DataCRUD provides CRUD operations and transaction management.
service DataCRUD {
  // Queries data from a table.
  rpc Query(QueryRequest) returns (QueryResponse);

  // Inserts one or more rows into a table.
  rpc Insert(InsertRequest) returns (MutationResponse);

  // Updates existing rows in a table based on conditions.
  rpc Update(UpdateRequest) returns (MutationResponse);

  // Deletes rows from a table based on conditions.
  rpc Delete(DeleteRequest) returns (MutationResponse);

  // --- Transaction Control ---
  // Begins a new transaction.
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse);
  // Commits an existing transaction.
  rpc CommitTransaction(TransactionRequest) returns (google.protobuf.Empty);
  // Rolls back an existing transaction.
  rpc RollbackTransaction(TransactionRequest) returns (google.protobuf.Empty);
}

// Metadata provides operations to inspect database schema.
service Metadata {
  // Lists available tables.
  rpc ListTables(ListTablesRequest) returns (ListTablesResponse);
  // Describes the structure (columns, types, etc.) of a specific table.
  rpc DescribeTable(DescribeTableRequest) returns (DescribeTableResponse);
}

// --- Core Data Types ---

// Represents a single row of data as a map of column names to values.
message Row {
  map<string, google.protobuf.Value> fields = 1;
}

// Enum for specifying sort order.
enum SortDirection {
  SORT_DIRECTION_UNSPECIFIED = 0;
  ASC = 1; // Ascending
  DESC = 2; // Descending
}

// Enum for comparison operators used in conditions.
enum Operator {
  OPERATOR_UNSPECIFIED = 0;
  EQ = 1; // Equal (=)
  NEQ = 2; // Not Equal (!= or <>)
  GT = 3; // Greater Than (>)
  GTE = 4; // Greater Than or Equal (>=)
  LT = 5; // Less Than (<)
  LTE = 6; // Less Than or Equal (<=)
  IN = 7; // In List (IN (...))
  NOT_IN = 8; // Not In List (NOT IN (...))
  LIKE = 9; // Like (LIKE 'pattern')
  NOT_LIKE = 10; // Not Like (NOT LIKE 'pattern')
  IS_NULL = 11; // Is Null (IS NULL)
  IS_NOT_NULL = 12; // Is Not Null (IS NOT NULL)
  EXISTS = 13;    // EXISTS (subquery)
  NOT_EXISTS = 14; // NOT EXISTS (subquery)
}

// Enum for logical operators combining conditions.
enum LogicalOperator {
  LOGICAL_OPERATOR_UNSPECIFIED = 0;
  AND = 1;
  OR = 2;
}

// Enum for handling conflicts during insertion (e.g., INSERT IGNORE).
enum ConflictAction {
  CONFLICT_ACTION_UNSPECIFIED = 0; // Default behavior (likely error)
  FAIL = 1;           // Fail the operation if conflict occurs (Standard SQL behavior)
  IGNORE = 2;         // Ignore the row causing conflict (MySQL INSERT IGNORE)
  UPSERT = 3;         // Update the existing row if conflict occurs (ON DUPLICATE KEY UPDATE)
}

// Enum for Join types.
enum JoinType {
  JOIN_TYPE_UNSPECIFIED = 0;
  INNER = 1;
  LEFT = 2;
  RIGHT = 3;
}

// --- Condition and Clause Structures ---

// Represents a single condition (e.g., "age > 30", "status IN ('active', 'pending')").
message Condition {
  string field = 1;         // Field name for comparison. For EXISTS/NOT_EXISTS, this field might be ignored or not applicable.
  Operator operator = 2;    // Comparison operator
  oneof operand_type {
    google.protobuf.Value literal_value = 3; // For literal values or lists of literal values.
    QueryRequest subquery_value = 4;      // For subqueries. e.g., IN (SELECT ...), EXISTS (SELECT ...), or field = (SELECT ...)
  }
}

// Represents a complex WHERE clause, potentially nested.
message WhereClause {
  oneof clause_type {
    Condition condition = 1;          // A single condition
    NestedClause nested_clause = 2;   // A combination of clauses
  }
}

// Represents a logical combination (AND/OR) of multiple WhereClauses.
message NestedClause {
  LogicalOperator logical_operator = 1; // AND or OR
  repeated WhereClause clauses = 2;     // Clauses to combine
}

// Specifies ordering for query results.
message OrderBy {
  string field = 1;                 // Column name to sort by
  SortDirection direction = 2;      // ASC or DESC
}

// Specifies field comparisons in JOIN ON conditions
message FieldComparison {
  // Field name from the primary table in the query (or its alias).
  string field_from_primary_table = 1;
  // Comparison operator, usually EQ for joins.
  Operator operator = 2;
  // Field name from the table being joined (the target_table in Join message).
  string field_from_joined_table = 3;
}

// Specifies a join between tables.
message Join {
  JoinType type = 1;                // Type of join (INNER, LEFT, etc.)
  string target_table = 2;          // The table to join with
  // Join conditions (e.g., "product.id = device.product_id")
  // Conditions for the JOIN ON clause, comparing fields between the primary and joined tables.
  repeated FieldComparison on_conditions = 3;
}

// Specifies aggregation functions.
message Aggregation {
  // Standard SQL aggregate functions
  enum Function {
    FUNCTION_UNSPECIFIED = 0;
    COUNT = 1;
    SUM = 2;
    AVG = 3;
    MIN = 4;
    MAX = 5;
  }
  Function function = 1;
  string field = 2;      // Field to aggregate (use "*" or specific field for COUNT)
  string alias = 3;      // Alias for the result column (e.g., "total_users")
}

// Specifies grouping for aggregation queries.
message GroupBy {
  repeated string fields = 1; // List of fields to group by
}

message TableSchema {
  string db_name = 1;
  string table_name = 2;
}

enum RedisDB {
  UNSPECIFIED = 0;
  PERMISSION = 1;
  MQTT = 2;
  SHADOW = 3;
  MANAGEMENT = 4;
  FILE = 5;
  DEVICE_LOG = 6;
}

// --- Request/Response Messages ---

// --- Query ---
message QueryRequest {
  TableSchema table = 1;                      // Target table name
  // Optional: If empty, implies SELECT * (or server default)
  repeated string select_fields = 2;     // Specific fields to retrieve
  // Optional: Aggregations to perform
  repeated Aggregation aggregations = 3;
  // Optional: Filter conditions
  WhereClause where_clause = 4;
  // Optional: Joins with other tables
  repeated Join joins = 5;
  // Optional: Grouping for aggregations
  GroupBy group_by = 6;
  // Optional: Having clause for filtering after grouping
  WhereClause having_clause = 7;
  // Optional: Sorting
  repeated OrderBy order_by = 8;
  // Optional: Pagination limit (number of rows)
  int64 limit = 9;
  // Optional: Pagination offset (starting row index)
  int64 offset = 10;
  // Optional: Transaction ID if part of a transaction
  string transaction_id = 11;
  // Optional: Set to true to request the total count matching the where clause (ignoring limit/offset).
  bool request_total_count = 12;
  // Optional: If set, indicates a desire to cache the query result based on a single equality condition
  // on this field. The caching layer will validate if the where_clause matches this expectation.
  string cache_by_field = 13;
  // Optional: Specify cache TTL for this query, defaults to 24h if not set or invalid.
  int64 cache_ttl_seconds = 14;
  // Optional: Specifies the Redis database number to use for caching this query.
  RedisDB redis_db = 15;
}

message QueryResponse {
  repeated Row rows = 1; // The resulting data rows
  // Optional: Total number of rows matching the query criteria, ignoring pagination (limit/offset).
  // This is populated only if requested in QueryRequest.
  int64 total_count = 2;
}

// --- Insert ---
message InsertRequest {
  TableSchema table = 1;                      // Target table name
  repeated Row rows = 2;                 // Rows to insert (required)
  ConflictAction on_conflict = 3;        // How to handle conflicts (e.g., IGNORE)
  // Optional: Transaction ID if part of a transaction
  string transaction_id = 4;
}

// --- Update ---
message UpdateRequest {
  TableSchema table = 1;                      // Target table name
  Row data = 2;                          // Map of fields and new values to set (required)
  WhereClause where_clause = 3;          // Conditions to match rows for update (required)
  // Optional: Transaction ID if part of a transaction
  string transaction_id = 4;
  // Optional
  string cache_by_field = 5;
  // Optional
  RedisDB redis_db = 6;
}

// --- Delete ---
message DeleteRequest {
  TableSchema table = 1;                      // Target table name
  WhereClause where_clause = 2;          // Conditions to match rows for deletion (required)
  // Optional: Transaction ID if part of a transaction
  string transaction_id = 3;
  // Optional
  string cache_by_field = 4;
  // Optional
  RedisDB redis_db = 5;
}

// --- Common Mutation Response ---
message MutationResponse {
  int64 affected_rows = 1; // Number of rows affected by Insert, Update, or Delete
}

// --- Transaction ---
message BeginTransactionRequest {
  string db_name = 1;
}

message BeginTransactionResponse {
  string transaction_id = 1; // ID to use in subsequent requests within this transaction
}

message TransactionRequest {
  string transaction_id = 1; // The ID of the transaction to commit or rollback (required)
}

// --- Metadata ---
message ListTablesRequest {
  // Optional: filter by schema name if applicable
  string db_name = 1;
}

message ListTablesResponse {
  repeated string table_names = 1;
}

message DescribeTableRequest {
  TableSchema table = 1; // Required
}

message ColumnMetadata {
  string name = 1;             // Column name
  string data_type = 2;        // Database-specific type (e.g., "VARCHAR(255)", "INT", "TIMESTAMP")
  bool is_nullable = 3;        // Can the column contain NULL?
  string default_value = 4;    // Default value as string (might be null)
  bool is_primary_key = 5;   // Is this column part of the primary key?
  int64 max_length = 6; // For string types
}

message IndexMetadata {
  string name = 1;             // Index name (e.g., "PRIMARY", "idx_user_email")
  repeated string columns = 2; // List of column names included in the index, in order.
  bool is_unique = 3;        // True if this is a unique index.
  // Optional: Index type (e.g., "BTREE", "HASH", "FULLTEXT"). Might be DB specific.
  string index_type = 4;
}

message DescribeTableResponse {
  string table_name = 1;
  repeated ColumnMetadata columns = 2;
  repeated IndexMetadata indices = 3;
}