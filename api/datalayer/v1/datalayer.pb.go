// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: api/datalayer/v1/datalayer.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for specifying sort order.
type SortDirection int32

const (
	SortDirection_SORT_DIRECTION_UNSPECIFIED SortDirection = 0
	SortDirection_ASC                        SortDirection = 1 // Ascending
	SortDirection_DESC                       SortDirection = 2 // Descending
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "SORT_DIRECTION_UNSPECIFIED",
		1: "ASC",
		2: "DESC",
	}
	SortDirection_value = map[string]int32{
		"SORT_DIRECTION_UNSPECIFIED": 0,
		"ASC":                        1,
		"DESC":                       2,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_api_datalayer_v1_datalayer_proto_enumTypes[0].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_api_datalayer_v1_datalayer_proto_enumTypes[0]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{0}
}

// Enum for comparison operators used in conditions.
type Operator int32

const (
	Operator_OPERATOR_UNSPECIFIED Operator = 0
	Operator_EQ                   Operator = 1  // Equal (=)
	Operator_NEQ                  Operator = 2  // Not Equal (!= or <>)
	Operator_GT                   Operator = 3  // Greater Than (>)
	Operator_GTE                  Operator = 4  // Greater Than or Equal (>=)
	Operator_LT                   Operator = 5  // Less Than (<)
	Operator_LTE                  Operator = 6  // Less Than or Equal (<=)
	Operator_IN                   Operator = 7  // In List (IN (...))
	Operator_NOT_IN               Operator = 8  // Not In List (NOT IN (...))
	Operator_LIKE                 Operator = 9  // Like (LIKE 'pattern')
	Operator_NOT_LIKE             Operator = 10 // Not Like (NOT LIKE 'pattern')
	Operator_IS_NULL              Operator = 11 // Is Null (IS NULL)
	Operator_IS_NOT_NULL          Operator = 12 // Is Not Null (IS NOT NULL)
	Operator_EXISTS               Operator = 13 // EXISTS (subquery)
	Operator_NOT_EXISTS           Operator = 14 // NOT EXISTS (subquery)
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0:  "OPERATOR_UNSPECIFIED",
		1:  "EQ",
		2:  "NEQ",
		3:  "GT",
		4:  "GTE",
		5:  "LT",
		6:  "LTE",
		7:  "IN",
		8:  "NOT_IN",
		9:  "LIKE",
		10: "NOT_LIKE",
		11: "IS_NULL",
		12: "IS_NOT_NULL",
		13: "EXISTS",
		14: "NOT_EXISTS",
	}
	Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"EQ":                   1,
		"NEQ":                  2,
		"GT":                   3,
		"GTE":                  4,
		"LT":                   5,
		"LTE":                  6,
		"IN":                   7,
		"NOT_IN":               8,
		"LIKE":                 9,
		"NOT_LIKE":             10,
		"IS_NULL":              11,
		"IS_NOT_NULL":          12,
		"EXISTS":               13,
		"NOT_EXISTS":           14,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_datalayer_v1_datalayer_proto_enumTypes[1].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_api_datalayer_v1_datalayer_proto_enumTypes[1]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{1}
}

// Enum for logical operators combining conditions.
type LogicalOperator int32

const (
	LogicalOperator_LOGICAL_OPERATOR_UNSPECIFIED LogicalOperator = 0
	LogicalOperator_AND                          LogicalOperator = 1
	LogicalOperator_OR                           LogicalOperator = 2
)

// Enum value maps for LogicalOperator.
var (
	LogicalOperator_name = map[int32]string{
		0: "LOGICAL_OPERATOR_UNSPECIFIED",
		1: "AND",
		2: "OR",
	}
	LogicalOperator_value = map[string]int32{
		"LOGICAL_OPERATOR_UNSPECIFIED": 0,
		"AND":                          1,
		"OR":                           2,
	}
)

func (x LogicalOperator) Enum() *LogicalOperator {
	p := new(LogicalOperator)
	*p = x
	return p
}

func (x LogicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_datalayer_v1_datalayer_proto_enumTypes[2].Descriptor()
}

func (LogicalOperator) Type() protoreflect.EnumType {
	return &file_api_datalayer_v1_datalayer_proto_enumTypes[2]
}

func (x LogicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogicalOperator.Descriptor instead.
func (LogicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{2}
}

// Enum for handling conflicts during insertion (e.g., INSERT IGNORE).
type ConflictAction int32

const (
	ConflictAction_CONFLICT_ACTION_UNSPECIFIED ConflictAction = 0 // Default behavior (likely error)
	ConflictAction_FAIL                        ConflictAction = 1 // Fail the operation if conflict occurs (Standard SQL behavior)
	ConflictAction_IGNORE                      ConflictAction = 2 // Ignore the row causing conflict (MySQL INSERT IGNORE)
	ConflictAction_UPSERT                      ConflictAction = 3 // Update the existing row if conflict occurs (ON DUPLICATE KEY UPDATE)
)

// Enum value maps for ConflictAction.
var (
	ConflictAction_name = map[int32]string{
		0: "CONFLICT_ACTION_UNSPECIFIED",
		1: "FAIL",
		2: "IGNORE",
		3: "UPSERT",
	}
	ConflictAction_value = map[string]int32{
		"CONFLICT_ACTION_UNSPECIFIED": 0,
		"FAIL":                        1,
		"IGNORE":                      2,
		"UPSERT":                      3,
	}
)

func (x ConflictAction) Enum() *ConflictAction {
	p := new(ConflictAction)
	*p = x
	return p
}

func (x ConflictAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConflictAction) Descriptor() protoreflect.EnumDescriptor {
	return file_api_datalayer_v1_datalayer_proto_enumTypes[3].Descriptor()
}

func (ConflictAction) Type() protoreflect.EnumType {
	return &file_api_datalayer_v1_datalayer_proto_enumTypes[3]
}

func (x ConflictAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConflictAction.Descriptor instead.
func (ConflictAction) EnumDescriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{3}
}

// Enum for Join types.
type JoinType int32

const (
	JoinType_JOIN_TYPE_UNSPECIFIED JoinType = 0
	JoinType_INNER                 JoinType = 1
	JoinType_LEFT                  JoinType = 2
	JoinType_RIGHT                 JoinType = 3
)

// Enum value maps for JoinType.
var (
	JoinType_name = map[int32]string{
		0: "JOIN_TYPE_UNSPECIFIED",
		1: "INNER",
		2: "LEFT",
		3: "RIGHT",
	}
	JoinType_value = map[string]int32{
		"JOIN_TYPE_UNSPECIFIED": 0,
		"INNER":                 1,
		"LEFT":                  2,
		"RIGHT":                 3,
	}
)

func (x JoinType) Enum() *JoinType {
	p := new(JoinType)
	*p = x
	return p
}

func (x JoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_datalayer_v1_datalayer_proto_enumTypes[4].Descriptor()
}

func (JoinType) Type() protoreflect.EnumType {
	return &file_api_datalayer_v1_datalayer_proto_enumTypes[4]
}

func (x JoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinType.Descriptor instead.
func (JoinType) EnumDescriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{4}
}

type RedisDB int32

const (
	RedisDB_UNSPECIFIED RedisDB = 0
	RedisDB_PERMISSION  RedisDB = 1
	RedisDB_MQTT        RedisDB = 2
	RedisDB_SHADOW      RedisDB = 3
	RedisDB_MANAGEMENT  RedisDB = 4
	RedisDB_FILE        RedisDB = 5
	RedisDB_DEVICE_LOG  RedisDB = 6
)

// Enum value maps for RedisDB.
var (
	RedisDB_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "PERMISSION",
		2: "MQTT",
		3: "SHADOW",
		4: "MANAGEMENT",
		5: "FILE",
		6: "DEVICE_LOG",
	}
	RedisDB_value = map[string]int32{
		"UNSPECIFIED": 0,
		"PERMISSION":  1,
		"MQTT":        2,
		"SHADOW":      3,
		"MANAGEMENT":  4,
		"FILE":        5,
		"DEVICE_LOG":  6,
	}
)

func (x RedisDB) Enum() *RedisDB {
	p := new(RedisDB)
	*p = x
	return p
}

func (x RedisDB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedisDB) Descriptor() protoreflect.EnumDescriptor {
	return file_api_datalayer_v1_datalayer_proto_enumTypes[5].Descriptor()
}

func (RedisDB) Type() protoreflect.EnumType {
	return &file_api_datalayer_v1_datalayer_proto_enumTypes[5]
}

func (x RedisDB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedisDB.Descriptor instead.
func (RedisDB) EnumDescriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{5}
}

// Standard SQL aggregate functions
type Aggregation_Function int32

const (
	Aggregation_FUNCTION_UNSPECIFIED Aggregation_Function = 0
	Aggregation_COUNT                Aggregation_Function = 1
	Aggregation_SUM                  Aggregation_Function = 2
	Aggregation_AVG                  Aggregation_Function = 3
	Aggregation_MIN                  Aggregation_Function = 4
	Aggregation_MAX                  Aggregation_Function = 5
)

// Enum value maps for Aggregation_Function.
var (
	Aggregation_Function_name = map[int32]string{
		0: "FUNCTION_UNSPECIFIED",
		1: "COUNT",
		2: "SUM",
		3: "AVG",
		4: "MIN",
		5: "MAX",
	}
	Aggregation_Function_value = map[string]int32{
		"FUNCTION_UNSPECIFIED": 0,
		"COUNT":                1,
		"SUM":                  2,
		"AVG":                  3,
		"MIN":                  4,
		"MAX":                  5,
	}
)

func (x Aggregation_Function) Enum() *Aggregation_Function {
	p := new(Aggregation_Function)
	*p = x
	return p
}

func (x Aggregation_Function) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aggregation_Function) Descriptor() protoreflect.EnumDescriptor {
	return file_api_datalayer_v1_datalayer_proto_enumTypes[6].Descriptor()
}

func (Aggregation_Function) Type() protoreflect.EnumType {
	return &file_api_datalayer_v1_datalayer_proto_enumTypes[6]
}

func (x Aggregation_Function) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aggregation_Function.Descriptor instead.
func (Aggregation_Function) EnumDescriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{7, 0}
}

// Represents a single row of data as a map of column names to values.
type Row struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Fields        map[string]*structpb.Value `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Row) Reset() {
	*x = Row{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{0}
}

func (x *Row) GetFields() map[string]*structpb.Value {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Represents a single condition (e.g., "age > 30", "status IN ('active', 'pending')").
type Condition struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Field    string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`                                   // Field name for comparison. For EXISTS/NOT_EXISTS, this field might be ignored or not applicable.
	Operator Operator               `protobuf:"varint,2,opt,name=operator,proto3,enum=datalayer.v1.Operator" json:"operator,omitempty"` // Comparison operator
	// Types that are valid to be assigned to OperandType:
	//
	//	*Condition_LiteralValue
	//	*Condition_SubqueryValue
	OperandType   isCondition_OperandType `protobuf_oneof:"operand_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{1}
}

func (x *Condition) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Condition) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_OPERATOR_UNSPECIFIED
}

func (x *Condition) GetOperandType() isCondition_OperandType {
	if x != nil {
		return x.OperandType
	}
	return nil
}

func (x *Condition) GetLiteralValue() *structpb.Value {
	if x != nil {
		if x, ok := x.OperandType.(*Condition_LiteralValue); ok {
			return x.LiteralValue
		}
	}
	return nil
}

func (x *Condition) GetSubqueryValue() *QueryRequest {
	if x != nil {
		if x, ok := x.OperandType.(*Condition_SubqueryValue); ok {
			return x.SubqueryValue
		}
	}
	return nil
}

type isCondition_OperandType interface {
	isCondition_OperandType()
}

type Condition_LiteralValue struct {
	LiteralValue *structpb.Value `protobuf:"bytes,3,opt,name=literal_value,json=literalValue,proto3,oneof"` // For literal values or lists of literal values.
}

type Condition_SubqueryValue struct {
	SubqueryValue *QueryRequest `protobuf:"bytes,4,opt,name=subquery_value,json=subqueryValue,proto3,oneof"` // For subqueries. e.g., IN (SELECT ...), EXISTS (SELECT ...), or field = (SELECT ...)
}

func (*Condition_LiteralValue) isCondition_OperandType() {}

func (*Condition_SubqueryValue) isCondition_OperandType() {}

// Represents a complex WHERE clause, potentially nested.
type WhereClause struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ClauseType:
	//
	//	*WhereClause_Condition
	//	*WhereClause_NestedClause
	ClauseType    isWhereClause_ClauseType `protobuf_oneof:"clause_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhereClause) Reset() {
	*x = WhereClause{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhereClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhereClause) ProtoMessage() {}

func (x *WhereClause) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhereClause.ProtoReflect.Descriptor instead.
func (*WhereClause) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{2}
}

func (x *WhereClause) GetClauseType() isWhereClause_ClauseType {
	if x != nil {
		return x.ClauseType
	}
	return nil
}

func (x *WhereClause) GetCondition() *Condition {
	if x != nil {
		if x, ok := x.ClauseType.(*WhereClause_Condition); ok {
			return x.Condition
		}
	}
	return nil
}

func (x *WhereClause) GetNestedClause() *NestedClause {
	if x != nil {
		if x, ok := x.ClauseType.(*WhereClause_NestedClause); ok {
			return x.NestedClause
		}
	}
	return nil
}

type isWhereClause_ClauseType interface {
	isWhereClause_ClauseType()
}

type WhereClause_Condition struct {
	Condition *Condition `protobuf:"bytes,1,opt,name=condition,proto3,oneof"` // A single condition
}

type WhereClause_NestedClause struct {
	NestedClause *NestedClause `protobuf:"bytes,2,opt,name=nested_clause,json=nestedClause,proto3,oneof"` // A combination of clauses
}

func (*WhereClause_Condition) isWhereClause_ClauseType() {}

func (*WhereClause_NestedClause) isWhereClause_ClauseType() {}

// Represents a logical combination (AND/OR) of multiple WhereClauses.
type NestedClause struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LogicalOperator LogicalOperator        `protobuf:"varint,1,opt,name=logical_operator,json=logicalOperator,proto3,enum=datalayer.v1.LogicalOperator" json:"logical_operator,omitempty"` // AND or OR
	Clauses         []*WhereClause         `protobuf:"bytes,2,rep,name=clauses,proto3" json:"clauses,omitempty"`                                                                           // Clauses to combine
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NestedClause) Reset() {
	*x = NestedClause{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NestedClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedClause) ProtoMessage() {}

func (x *NestedClause) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedClause.ProtoReflect.Descriptor instead.
func (*NestedClause) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{3}
}

func (x *NestedClause) GetLogicalOperator() LogicalOperator {
	if x != nil {
		return x.LogicalOperator
	}
	return LogicalOperator_LOGICAL_OPERATOR_UNSPECIFIED
}

func (x *NestedClause) GetClauses() []*WhereClause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

// Specifies ordering for query results.
type OrderBy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`                                          // Column name to sort by
	Direction     SortDirection          `protobuf:"varint,2,opt,name=direction,proto3,enum=datalayer.v1.SortDirection" json:"direction,omitempty"` // ASC or DESC
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBy) Reset() {
	*x = OrderBy{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBy) ProtoMessage() {}

func (x *OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBy.ProtoReflect.Descriptor instead.
func (*OrderBy) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{4}
}

func (x *OrderBy) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *OrderBy) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_SORT_DIRECTION_UNSPECIFIED
}

// Specifies field comparisons in JOIN ON conditions
type FieldComparison struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Field name from the primary table in the query (or its alias).
	FieldFromPrimaryTable string `protobuf:"bytes,1,opt,name=field_from_primary_table,json=fieldFromPrimaryTable,proto3" json:"field_from_primary_table,omitempty"`
	// Comparison operator, usually EQ for joins.
	Operator Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=datalayer.v1.Operator" json:"operator,omitempty"`
	// Field name from the table being joined (the target_table in Join message).
	FieldFromJoinedTable string `protobuf:"bytes,3,opt,name=field_from_joined_table,json=fieldFromJoinedTable,proto3" json:"field_from_joined_table,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FieldComparison) Reset() {
	*x = FieldComparison{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldComparison) ProtoMessage() {}

func (x *FieldComparison) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldComparison.ProtoReflect.Descriptor instead.
func (*FieldComparison) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{5}
}

func (x *FieldComparison) GetFieldFromPrimaryTable() string {
	if x != nil {
		return x.FieldFromPrimaryTable
	}
	return ""
}

func (x *FieldComparison) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_OPERATOR_UNSPECIFIED
}

func (x *FieldComparison) GetFieldFromJoinedTable() string {
	if x != nil {
		return x.FieldFromJoinedTable
	}
	return ""
}

// Specifies a join between tables.
type Join struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Type        JoinType               `protobuf:"varint,1,opt,name=type,proto3,enum=datalayer.v1.JoinType" json:"type,omitempty"`      // Type of join (INNER, LEFT, etc.)
	TargetTable string                 `protobuf:"bytes,2,opt,name=target_table,json=targetTable,proto3" json:"target_table,omitempty"` // The table to join with
	// Join conditions (e.g., "product.id = device.product_id")
	// Conditions for the JOIN ON clause, comparing fields between the primary and joined tables.
	OnConditions  []*FieldComparison `protobuf:"bytes,3,rep,name=on_conditions,json=onConditions,proto3" json:"on_conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Join) Reset() {
	*x = Join{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join) ProtoMessage() {}

func (x *Join) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join.ProtoReflect.Descriptor instead.
func (*Join) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{6}
}

func (x *Join) GetType() JoinType {
	if x != nil {
		return x.Type
	}
	return JoinType_JOIN_TYPE_UNSPECIFIED
}

func (x *Join) GetTargetTable() string {
	if x != nil {
		return x.TargetTable
	}
	return ""
}

func (x *Join) GetOnConditions() []*FieldComparison {
	if x != nil {
		return x.OnConditions
	}
	return nil
}

// Specifies aggregation functions.
type Aggregation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Function      Aggregation_Function   `protobuf:"varint,1,opt,name=function,proto3,enum=datalayer.v1.Aggregation_Function" json:"function,omitempty"`
	Field         string                 `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"` // Field to aggregate (use "*" or specific field for COUNT)
	Alias         string                 `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"` // Alias for the result column (e.g., "total_users")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{7}
}

func (x *Aggregation) GetFunction() Aggregation_Function {
	if x != nil {
		return x.Function
	}
	return Aggregation_FUNCTION_UNSPECIFIED
}

func (x *Aggregation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Aggregation) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

// Specifies grouping for aggregation queries.
type GroupBy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        []string               `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"` // List of fields to group by
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupBy) Reset() {
	*x = GroupBy{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBy) ProtoMessage() {}

func (x *GroupBy) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBy.ProtoReflect.Descriptor instead.
func (*GroupBy) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{8}
}

func (x *GroupBy) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type TableSchema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DbName        string                 `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	TableName     string                 `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableSchema) Reset() {
	*x = TableSchema{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchema) ProtoMessage() {}

func (x *TableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchema.ProtoReflect.Descriptor instead.
func (*TableSchema) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{9}
}

func (x *TableSchema) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *TableSchema) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

// --- Query ---
type QueryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Table *TableSchema           `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"` // Target table name
	// Optional: If empty, implies SELECT * (or server default)
	SelectFields []string `protobuf:"bytes,2,rep,name=select_fields,json=selectFields,proto3" json:"select_fields,omitempty"` // Specific fields to retrieve
	// Optional: Aggregations to perform
	Aggregations []*Aggregation `protobuf:"bytes,3,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	// Optional: Filter conditions
	WhereClause *WhereClause `protobuf:"bytes,4,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`
	// Optional: Joins with other tables
	Joins []*Join `protobuf:"bytes,5,rep,name=joins,proto3" json:"joins,omitempty"`
	// Optional: Grouping for aggregations
	GroupBy *GroupBy `protobuf:"bytes,6,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	// Optional: Having clause for filtering after grouping
	HavingClause *WhereClause `protobuf:"bytes,7,opt,name=having_clause,json=havingClause,proto3" json:"having_clause,omitempty"`
	// Optional: Sorting
	OrderBy []*OrderBy `protobuf:"bytes,8,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Optional: Pagination limit (number of rows)
	Limit int64 `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	// Optional: Pagination offset (starting row index)
	Offset int64 `protobuf:"varint,10,opt,name=offset,proto3" json:"offset,omitempty"`
	// Optional: Transaction ID if part of a transaction
	TransactionId string `protobuf:"bytes,11,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Optional: Set to true to request the total count matching the where clause (ignoring limit/offset).
	RequestTotalCount bool `protobuf:"varint,12,opt,name=request_total_count,json=requestTotalCount,proto3" json:"request_total_count,omitempty"`
	// Optional: If set, indicates a desire to cache the query result based on a single equality condition
	// on this field. The caching layer will validate if the where_clause matches this expectation.
	CacheByField string `protobuf:"bytes,13,opt,name=cache_by_field,json=cacheByField,proto3" json:"cache_by_field,omitempty"`
	// Optional: Specify cache TTL for this query, defaults to 24h if not set or invalid.
	CacheTtlSeconds int64 `protobuf:"varint,14,opt,name=cache_ttl_seconds,json=cacheTtlSeconds,proto3" json:"cache_ttl_seconds,omitempty"`
	// Optional: Specifies the Redis database number to use for caching this query.
	RedisDb       RedisDB `protobuf:"varint,15,opt,name=redis_db,json=redisDb,proto3,enum=datalayer.v1.RedisDB" json:"redis_db,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{10}
}

func (x *QueryRequest) GetTable() *TableSchema {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *QueryRequest) GetSelectFields() []string {
	if x != nil {
		return x.SelectFields
	}
	return nil
}

func (x *QueryRequest) GetAggregations() []*Aggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *QueryRequest) GetWhereClause() *WhereClause {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *QueryRequest) GetJoins() []*Join {
	if x != nil {
		return x.Joins
	}
	return nil
}

func (x *QueryRequest) GetGroupBy() *GroupBy {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *QueryRequest) GetHavingClause() *WhereClause {
	if x != nil {
		return x.HavingClause
	}
	return nil
}

func (x *QueryRequest) GetOrderBy() []*OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *QueryRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *QueryRequest) GetRequestTotalCount() bool {
	if x != nil {
		return x.RequestTotalCount
	}
	return false
}

func (x *QueryRequest) GetCacheByField() string {
	if x != nil {
		return x.CacheByField
	}
	return ""
}

func (x *QueryRequest) GetCacheTtlSeconds() int64 {
	if x != nil {
		return x.CacheTtlSeconds
	}
	return 0
}

func (x *QueryRequest) GetRedisDb() RedisDB {
	if x != nil {
		return x.RedisDb
	}
	return RedisDB_UNSPECIFIED
}

type QueryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Rows  []*Row                 `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"` // The resulting data rows
	// Optional: Total number of rows matching the query criteria, ignoring pagination (limit/offset).
	// This is populated only if requested in QueryRequest.
	TotalCount    int64 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{11}
}

func (x *QueryResponse) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *QueryResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// --- Insert ---
type InsertRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Table      *TableSchema           `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`                                                               // Target table name
	Rows       []*Row                 `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`                                                                 // Rows to insert (required)
	OnConflict ConflictAction         `protobuf:"varint,3,opt,name=on_conflict,json=onConflict,proto3,enum=datalayer.v1.ConflictAction" json:"on_conflict,omitempty"` // How to handle conflicts (e.g., IGNORE)
	// Optional: Transaction ID if part of a transaction
	TransactionId string `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertRequest) Reset() {
	*x = InsertRequest{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRequest) ProtoMessage() {}

func (x *InsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRequest.ProtoReflect.Descriptor instead.
func (*InsertRequest) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{12}
}

func (x *InsertRequest) GetTable() *TableSchema {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *InsertRequest) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *InsertRequest) GetOnConflict() ConflictAction {
	if x != nil {
		return x.OnConflict
	}
	return ConflictAction_CONFLICT_ACTION_UNSPECIFIED
}

func (x *InsertRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// --- Update ---
type UpdateRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Table       *TableSchema           `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`                                // Target table name
	Data        *Row                   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                                  // Map of fields and new values to set (required)
	WhereClause *WhereClause           `protobuf:"bytes,3,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"` // Conditions to match rows for update (required)
	// Optional: Transaction ID if part of a transaction
	TransactionId string `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Optional
	CacheByField string `protobuf:"bytes,5,opt,name=cache_by_field,json=cacheByField,proto3" json:"cache_by_field,omitempty"`
	// Optional
	RedisDb       RedisDB `protobuf:"varint,6,opt,name=redis_db,json=redisDb,proto3,enum=datalayer.v1.RedisDB" json:"redis_db,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateRequest) GetTable() *TableSchema {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *UpdateRequest) GetData() *Row {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateRequest) GetWhereClause() *WhereClause {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *UpdateRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *UpdateRequest) GetCacheByField() string {
	if x != nil {
		return x.CacheByField
	}
	return ""
}

func (x *UpdateRequest) GetRedisDb() RedisDB {
	if x != nil {
		return x.RedisDb
	}
	return RedisDB_UNSPECIFIED
}

// --- Delete ---
type DeleteRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Table       *TableSchema           `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`                                // Target table name
	WhereClause *WhereClause           `protobuf:"bytes,2,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"` // Conditions to match rows for deletion (required)
	// Optional: Transaction ID if part of a transaction
	TransactionId string `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Optional
	CacheByField string `protobuf:"bytes,4,opt,name=cache_by_field,json=cacheByField,proto3" json:"cache_by_field,omitempty"`
	// Optional
	RedisDb       RedisDB `protobuf:"varint,5,opt,name=redis_db,json=redisDb,proto3,enum=datalayer.v1.RedisDB" json:"redis_db,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteRequest) GetTable() *TableSchema {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *DeleteRequest) GetWhereClause() *WhereClause {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *DeleteRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *DeleteRequest) GetCacheByField() string {
	if x != nil {
		return x.CacheByField
	}
	return ""
}

func (x *DeleteRequest) GetRedisDb() RedisDB {
	if x != nil {
		return x.RedisDb
	}
	return RedisDB_UNSPECIFIED
}

// --- Common Mutation Response ---
type MutationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AffectedRows  int64                  `protobuf:"varint,1,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"` // Number of rows affected by Insert, Update, or Delete
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MutationResponse) Reset() {
	*x = MutationResponse{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MutationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutationResponse) ProtoMessage() {}

func (x *MutationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutationResponse.ProtoReflect.Descriptor instead.
func (*MutationResponse) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{15}
}

func (x *MutationResponse) GetAffectedRows() int64 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

// --- Transaction ---
type BeginTransactionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DbName        string                 `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeginTransactionRequest) Reset() {
	*x = BeginTransactionRequest{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginTransactionRequest) ProtoMessage() {}

func (x *BeginTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginTransactionRequest.ProtoReflect.Descriptor instead.
func (*BeginTransactionRequest) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{16}
}

func (x *BeginTransactionRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

type BeginTransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // ID to use in subsequent requests within this transaction
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeginTransactionResponse) Reset() {
	*x = BeginTransactionResponse{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginTransactionResponse) ProtoMessage() {}

func (x *BeginTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginTransactionResponse.ProtoReflect.Descriptor instead.
func (*BeginTransactionResponse) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{17}
}

func (x *BeginTransactionResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type TransactionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // The ID of the transaction to commit or rollback (required)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionRequest) Reset() {
	*x = TransactionRequest{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequest) ProtoMessage() {}

func (x *TransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequest.ProtoReflect.Descriptor instead.
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{18}
}

func (x *TransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// --- Metadata ---
type ListTablesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional: filter by schema name if applicable
	DbName        string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablesRequest) Reset() {
	*x = ListTablesRequest{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesRequest) ProtoMessage() {}

func (x *ListTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesRequest.ProtoReflect.Descriptor instead.
func (*ListTablesRequest) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{19}
}

func (x *ListTablesRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

type ListTablesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableNames    []string               `protobuf:"bytes,1,rep,name=table_names,json=tableNames,proto3" json:"table_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablesResponse) Reset() {
	*x = ListTablesResponse{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesResponse) ProtoMessage() {}

func (x *ListTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesResponse.ProtoReflect.Descriptor instead.
func (*ListTablesResponse) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{20}
}

func (x *ListTablesResponse) GetTableNames() []string {
	if x != nil {
		return x.TableNames
	}
	return nil
}

type DescribeTableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Table         *TableSchema           `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"` // Required
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeTableRequest) Reset() {
	*x = DescribeTableRequest{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTableRequest) ProtoMessage() {}

func (x *DescribeTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTableRequest.ProtoReflect.Descriptor instead.
func (*DescribeTableRequest) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{21}
}

func (x *DescribeTableRequest) GetTable() *TableSchema {
	if x != nil {
		return x.Table
	}
	return nil
}

type ColumnMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                        // Column name
	DataType      string                 `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`                // Database-specific type (e.g., "VARCHAR(255)", "INT", "TIMESTAMP")
	IsNullable    bool                   `protobuf:"varint,3,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`         // Can the column contain NULL?
	DefaultValue  string                 `protobuf:"bytes,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`    // Default value as string (might be null)
	IsPrimaryKey  bool                   `protobuf:"varint,5,opt,name=is_primary_key,json=isPrimaryKey,proto3" json:"is_primary_key,omitempty"` // Is this column part of the primary key?
	MaxLength     int64                  `protobuf:"varint,6,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`            // For string types
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnMetadata) Reset() {
	*x = ColumnMetadata{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMetadata) ProtoMessage() {}

func (x *ColumnMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMetadata.ProtoReflect.Descriptor instead.
func (*ColumnMetadata) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{22}
}

func (x *ColumnMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnMetadata) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *ColumnMetadata) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *ColumnMetadata) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *ColumnMetadata) GetIsPrimaryKey() bool {
	if x != nil {
		return x.IsPrimaryKey
	}
	return false
}

func (x *ColumnMetadata) GetMaxLength() int64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

type IndexMetadata struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Name     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                          // Index name (e.g., "PRIMARY", "idx_user_email")
	Columns  []string               `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`                    // List of column names included in the index, in order.
	IsUnique bool                   `protobuf:"varint,3,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"` // True if this is a unique index.
	// Optional: Index type (e.g., "BTREE", "HASH", "FULLTEXT"). Might be DB specific.
	IndexType     string `protobuf:"bytes,4,opt,name=index_type,json=indexType,proto3" json:"index_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexMetadata) Reset() {
	*x = IndexMetadata{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexMetadata) ProtoMessage() {}

func (x *IndexMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexMetadata.ProtoReflect.Descriptor instead.
func (*IndexMetadata) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{23}
}

func (x *IndexMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndexMetadata) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *IndexMetadata) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *IndexMetadata) GetIndexType() string {
	if x != nil {
		return x.IndexType
	}
	return ""
}

type DescribeTableResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Columns       []*ColumnMetadata      `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	Indices       []*IndexMetadata       `protobuf:"bytes,3,rep,name=indices,proto3" json:"indices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeTableResponse) Reset() {
	*x = DescribeTableResponse{}
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTableResponse) ProtoMessage() {}

func (x *DescribeTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_datalayer_v1_datalayer_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTableResponse.ProtoReflect.Descriptor instead.
func (*DescribeTableResponse) Descriptor() ([]byte, []int) {
	return file_api_datalayer_v1_datalayer_proto_rawDescGZIP(), []int{24}
}

func (x *DescribeTableResponse) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DescribeTableResponse) GetColumns() []*ColumnMetadata {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DescribeTableResponse) GetIndices() []*IndexMetadata {
	if x != nil {
		return x.Indices
	}
	return nil
}

var File_api_datalayer_v1_datalayer_proto protoreflect.FileDescriptor

const file_api_datalayer_v1_datalayer_proto_rawDesc = "" +
	"\n" +
	" api/datalayer/v1/datalayer.proto\x12\fdatalayer.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1bgoogle/protobuf/empty.proto\"\x8f\x01\n" +
	"\x03Row\x125\n" +
	"\x06fields\x18\x01 \x03(\v2\x1d.datalayer.v1.Row.FieldsEntryR\x06fields\x1aQ\n" +
	"\vFieldsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\xe9\x01\n" +
	"\tCondition\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x122\n" +
	"\boperator\x18\x02 \x01(\x0e2\x16.datalayer.v1.OperatorR\boperator\x12=\n" +
	"\rliteral_value\x18\x03 \x01(\v2\x16.google.protobuf.ValueH\x00R\fliteralValue\x12C\n" +
	"\x0esubquery_value\x18\x04 \x01(\v2\x1a.datalayer.v1.QueryRequestH\x00R\rsubqueryValueB\x0e\n" +
	"\foperand_type\"\x98\x01\n" +
	"\vWhereClause\x127\n" +
	"\tcondition\x18\x01 \x01(\v2\x17.datalayer.v1.ConditionH\x00R\tcondition\x12A\n" +
	"\rnested_clause\x18\x02 \x01(\v2\x1a.datalayer.v1.NestedClauseH\x00R\fnestedClauseB\r\n" +
	"\vclause_type\"\x8d\x01\n" +
	"\fNestedClause\x12H\n" +
	"\x10logical_operator\x18\x01 \x01(\x0e2\x1d.datalayer.v1.LogicalOperatorR\x0flogicalOperator\x123\n" +
	"\aclauses\x18\x02 \x03(\v2\x19.datalayer.v1.WhereClauseR\aclauses\"Z\n" +
	"\aOrderBy\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x129\n" +
	"\tdirection\x18\x02 \x01(\x0e2\x1b.datalayer.v1.SortDirectionR\tdirection\"\xb5\x01\n" +
	"\x0fFieldComparison\x127\n" +
	"\x18field_from_primary_table\x18\x01 \x01(\tR\x15fieldFromPrimaryTable\x122\n" +
	"\boperator\x18\x02 \x01(\x0e2\x16.datalayer.v1.OperatorR\boperator\x125\n" +
	"\x17field_from_joined_table\x18\x03 \x01(\tR\x14fieldFromJoinedTable\"\x99\x01\n" +
	"\x04Join\x12*\n" +
	"\x04type\x18\x01 \x01(\x0e2\x16.datalayer.v1.JoinTypeR\x04type\x12!\n" +
	"\ftarget_table\x18\x02 \x01(\tR\vtargetTable\x12B\n" +
	"\ron_conditions\x18\x03 \x03(\v2\x1d.datalayer.v1.FieldComparisonR\fonConditions\"\xce\x01\n" +
	"\vAggregation\x12>\n" +
	"\bfunction\x18\x01 \x01(\x0e2\".datalayer.v1.Aggregation.FunctionR\bfunction\x12\x14\n" +
	"\x05field\x18\x02 \x01(\tR\x05field\x12\x14\n" +
	"\x05alias\x18\x03 \x01(\tR\x05alias\"S\n" +
	"\bFunction\x12\x18\n" +
	"\x14FUNCTION_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05COUNT\x10\x01\x12\a\n" +
	"\x03SUM\x10\x02\x12\a\n" +
	"\x03AVG\x10\x03\x12\a\n" +
	"\x03MIN\x10\x04\x12\a\n" +
	"\x03MAX\x10\x05\"!\n" +
	"\aGroupBy\x12\x16\n" +
	"\x06fields\x18\x01 \x03(\tR\x06fields\"E\n" +
	"\vTableSchema\x12\x17\n" +
	"\adb_name\x18\x01 \x01(\tR\x06dbName\x12\x1d\n" +
	"\n" +
	"table_name\x18\x02 \x01(\tR\ttableName\"\xb8\x05\n" +
	"\fQueryRequest\x12/\n" +
	"\x05table\x18\x01 \x01(\v2\x19.datalayer.v1.TableSchemaR\x05table\x12#\n" +
	"\rselect_fields\x18\x02 \x03(\tR\fselectFields\x12=\n" +
	"\faggregations\x18\x03 \x03(\v2\x19.datalayer.v1.AggregationR\faggregations\x12<\n" +
	"\fwhere_clause\x18\x04 \x01(\v2\x19.datalayer.v1.WhereClauseR\vwhereClause\x12(\n" +
	"\x05joins\x18\x05 \x03(\v2\x12.datalayer.v1.JoinR\x05joins\x120\n" +
	"\bgroup_by\x18\x06 \x01(\v2\x15.datalayer.v1.GroupByR\agroupBy\x12>\n" +
	"\rhaving_clause\x18\a \x01(\v2\x19.datalayer.v1.WhereClauseR\fhavingClause\x120\n" +
	"\border_by\x18\b \x03(\v2\x15.datalayer.v1.OrderByR\aorderBy\x12\x14\n" +
	"\x05limit\x18\t \x01(\x03R\x05limit\x12\x16\n" +
	"\x06offset\x18\n" +
	" \x01(\x03R\x06offset\x12%\n" +
	"\x0etransaction_id\x18\v \x01(\tR\rtransactionId\x12.\n" +
	"\x13request_total_count\x18\f \x01(\bR\x11requestTotalCount\x12$\n" +
	"\x0ecache_by_field\x18\r \x01(\tR\fcacheByField\x12*\n" +
	"\x11cache_ttl_seconds\x18\x0e \x01(\x03R\x0fcacheTtlSeconds\x120\n" +
	"\bredis_db\x18\x0f \x01(\x0e2\x15.datalayer.v1.RedisDBR\aredisDb\"W\n" +
	"\rQueryResponse\x12%\n" +
	"\x04rows\x18\x01 \x03(\v2\x11.datalayer.v1.RowR\x04rows\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x03R\n" +
	"totalCount\"\xcd\x01\n" +
	"\rInsertRequest\x12/\n" +
	"\x05table\x18\x01 \x01(\v2\x19.datalayer.v1.TableSchemaR\x05table\x12%\n" +
	"\x04rows\x18\x02 \x03(\v2\x11.datalayer.v1.RowR\x04rows\x12=\n" +
	"\von_conflict\x18\x03 \x01(\x0e2\x1c.datalayer.v1.ConflictActionR\n" +
	"onConflict\x12%\n" +
	"\x0etransaction_id\x18\x04 \x01(\tR\rtransactionId\"\xa4\x02\n" +
	"\rUpdateRequest\x12/\n" +
	"\x05table\x18\x01 \x01(\v2\x19.datalayer.v1.TableSchemaR\x05table\x12%\n" +
	"\x04data\x18\x02 \x01(\v2\x11.datalayer.v1.RowR\x04data\x12<\n" +
	"\fwhere_clause\x18\x03 \x01(\v2\x19.datalayer.v1.WhereClauseR\vwhereClause\x12%\n" +
	"\x0etransaction_id\x18\x04 \x01(\tR\rtransactionId\x12$\n" +
	"\x0ecache_by_field\x18\x05 \x01(\tR\fcacheByField\x120\n" +
	"\bredis_db\x18\x06 \x01(\x0e2\x15.datalayer.v1.RedisDBR\aredisDb\"\xfd\x01\n" +
	"\rDeleteRequest\x12/\n" +
	"\x05table\x18\x01 \x01(\v2\x19.datalayer.v1.TableSchemaR\x05table\x12<\n" +
	"\fwhere_clause\x18\x02 \x01(\v2\x19.datalayer.v1.WhereClauseR\vwhereClause\x12%\n" +
	"\x0etransaction_id\x18\x03 \x01(\tR\rtransactionId\x12$\n" +
	"\x0ecache_by_field\x18\x04 \x01(\tR\fcacheByField\x120\n" +
	"\bredis_db\x18\x05 \x01(\x0e2\x15.datalayer.v1.RedisDBR\aredisDb\"7\n" +
	"\x10MutationResponse\x12#\n" +
	"\raffected_rows\x18\x01 \x01(\x03R\faffectedRows\"2\n" +
	"\x17BeginTransactionRequest\x12\x17\n" +
	"\adb_name\x18\x01 \x01(\tR\x06dbName\"A\n" +
	"\x18BeginTransactionResponse\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\";\n" +
	"\x12TransactionRequest\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\",\n" +
	"\x11ListTablesRequest\x12\x17\n" +
	"\adb_name\x18\x01 \x01(\tR\x06dbName\"5\n" +
	"\x12ListTablesResponse\x12\x1f\n" +
	"\vtable_names\x18\x01 \x03(\tR\n" +
	"tableNames\"G\n" +
	"\x14DescribeTableRequest\x12/\n" +
	"\x05table\x18\x01 \x01(\v2\x19.datalayer.v1.TableSchemaR\x05table\"\xcc\x01\n" +
	"\x0eColumnMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tdata_type\x18\x02 \x01(\tR\bdataType\x12\x1f\n" +
	"\vis_nullable\x18\x03 \x01(\bR\n" +
	"isNullable\x12#\n" +
	"\rdefault_value\x18\x04 \x01(\tR\fdefaultValue\x12$\n" +
	"\x0eis_primary_key\x18\x05 \x01(\bR\fisPrimaryKey\x12\x1d\n" +
	"\n" +
	"max_length\x18\x06 \x01(\x03R\tmaxLength\"y\n" +
	"\rIndexMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\acolumns\x18\x02 \x03(\tR\acolumns\x12\x1b\n" +
	"\tis_unique\x18\x03 \x01(\bR\bisUnique\x12\x1d\n" +
	"\n" +
	"index_type\x18\x04 \x01(\tR\tindexType\"\xa5\x01\n" +
	"\x15DescribeTableResponse\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x126\n" +
	"\acolumns\x18\x02 \x03(\v2\x1c.datalayer.v1.ColumnMetadataR\acolumns\x125\n" +
	"\aindices\x18\x03 \x03(\v2\x1b.datalayer.v1.IndexMetadataR\aindices*B\n" +
	"\rSortDirection\x12\x1e\n" +
	"\x1aSORT_DIRECTION_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03ASC\x10\x01\x12\b\n" +
	"\x04DESC\x10\x02*\xbd\x01\n" +
	"\bOperator\x12\x18\n" +
	"\x14OPERATOR_UNSPECIFIED\x10\x00\x12\x06\n" +
	"\x02EQ\x10\x01\x12\a\n" +
	"\x03NEQ\x10\x02\x12\x06\n" +
	"\x02GT\x10\x03\x12\a\n" +
	"\x03GTE\x10\x04\x12\x06\n" +
	"\x02LT\x10\x05\x12\a\n" +
	"\x03LTE\x10\x06\x12\x06\n" +
	"\x02IN\x10\a\x12\n" +
	"\n" +
	"\x06NOT_IN\x10\b\x12\b\n" +
	"\x04LIKE\x10\t\x12\f\n" +
	"\bNOT_LIKE\x10\n" +
	"\x12\v\n" +
	"\aIS_NULL\x10\v\x12\x0f\n" +
	"\vIS_NOT_NULL\x10\f\x12\n" +
	"\n" +
	"\x06EXISTS\x10\r\x12\x0e\n" +
	"\n" +
	"NOT_EXISTS\x10\x0e*D\n" +
	"\x0fLogicalOperator\x12 \n" +
	"\x1cLOGICAL_OPERATOR_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03AND\x10\x01\x12\x06\n" +
	"\x02OR\x10\x02*S\n" +
	"\x0eConflictAction\x12\x1f\n" +
	"\x1bCONFLICT_ACTION_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04FAIL\x10\x01\x12\n" +
	"\n" +
	"\x06IGNORE\x10\x02\x12\n" +
	"\n" +
	"\x06UPSERT\x10\x03*E\n" +
	"\bJoinType\x12\x19\n" +
	"\x15JOIN_TYPE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05INNER\x10\x01\x12\b\n" +
	"\x04LEFT\x10\x02\x12\t\n" +
	"\x05RIGHT\x10\x03*j\n" +
	"\aRedisDB\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"PERMISSION\x10\x01\x12\b\n" +
	"\x04MQTT\x10\x02\x12\n" +
	"\n" +
	"\x06SHADOW\x10\x03\x12\x0e\n" +
	"\n" +
	"MANAGEMENT\x10\x04\x12\b\n" +
	"\x04FILE\x10\x05\x12\x0e\n" +
	"\n" +
	"DEVICE_LOG\x10\x062\xa4\x04\n" +
	"\bDataCRUD\x12@\n" +
	"\x05Query\x12\x1a.datalayer.v1.QueryRequest\x1a\x1b.datalayer.v1.QueryResponse\x12E\n" +
	"\x06Insert\x12\x1b.datalayer.v1.InsertRequest\x1a\x1e.datalayer.v1.MutationResponse\x12E\n" +
	"\x06Update\x12\x1b.datalayer.v1.UpdateRequest\x1a\x1e.datalayer.v1.MutationResponse\x12E\n" +
	"\x06Delete\x12\x1b.datalayer.v1.DeleteRequest\x1a\x1e.datalayer.v1.MutationResponse\x12a\n" +
	"\x10BeginTransaction\x12%.datalayer.v1.BeginTransactionRequest\x1a&.datalayer.v1.BeginTransactionResponse\x12M\n" +
	"\x11CommitTransaction\x12 .datalayer.v1.TransactionRequest\x1a\x16.google.protobuf.Empty\x12O\n" +
	"\x13RollbackTransaction\x12 .datalayer.v1.TransactionRequest\x1a\x16.google.protobuf.Empty2\xb5\x01\n" +
	"\bMetadata\x12O\n" +
	"\n" +
	"ListTables\x12\x1f.datalayer.v1.ListTablesRequest\x1a .datalayer.v1.ListTablesResponse\x12X\n" +
	"\rDescribeTable\x12\".datalayer.v1.DescribeTableRequest\x1a#.datalayer.v1.DescribeTableResponseB\x11Z\x0fdatalayer/v1;v1b\x06proto3"

var (
	file_api_datalayer_v1_datalayer_proto_rawDescOnce sync.Once
	file_api_datalayer_v1_datalayer_proto_rawDescData []byte
)

func file_api_datalayer_v1_datalayer_proto_rawDescGZIP() []byte {
	file_api_datalayer_v1_datalayer_proto_rawDescOnce.Do(func() {
		file_api_datalayer_v1_datalayer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_datalayer_v1_datalayer_proto_rawDesc), len(file_api_datalayer_v1_datalayer_proto_rawDesc)))
	})
	return file_api_datalayer_v1_datalayer_proto_rawDescData
}

var file_api_datalayer_v1_datalayer_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_api_datalayer_v1_datalayer_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_api_datalayer_v1_datalayer_proto_goTypes = []any{
	(SortDirection)(0),               // 0: datalayer.v1.SortDirection
	(Operator)(0),                    // 1: datalayer.v1.Operator
	(LogicalOperator)(0),             // 2: datalayer.v1.LogicalOperator
	(ConflictAction)(0),              // 3: datalayer.v1.ConflictAction
	(JoinType)(0),                    // 4: datalayer.v1.JoinType
	(RedisDB)(0),                     // 5: datalayer.v1.RedisDB
	(Aggregation_Function)(0),        // 6: datalayer.v1.Aggregation.Function
	(*Row)(nil),                      // 7: datalayer.v1.Row
	(*Condition)(nil),                // 8: datalayer.v1.Condition
	(*WhereClause)(nil),              // 9: datalayer.v1.WhereClause
	(*NestedClause)(nil),             // 10: datalayer.v1.NestedClause
	(*OrderBy)(nil),                  // 11: datalayer.v1.OrderBy
	(*FieldComparison)(nil),          // 12: datalayer.v1.FieldComparison
	(*Join)(nil),                     // 13: datalayer.v1.Join
	(*Aggregation)(nil),              // 14: datalayer.v1.Aggregation
	(*GroupBy)(nil),                  // 15: datalayer.v1.GroupBy
	(*TableSchema)(nil),              // 16: datalayer.v1.TableSchema
	(*QueryRequest)(nil),             // 17: datalayer.v1.QueryRequest
	(*QueryResponse)(nil),            // 18: datalayer.v1.QueryResponse
	(*InsertRequest)(nil),            // 19: datalayer.v1.InsertRequest
	(*UpdateRequest)(nil),            // 20: datalayer.v1.UpdateRequest
	(*DeleteRequest)(nil),            // 21: datalayer.v1.DeleteRequest
	(*MutationResponse)(nil),         // 22: datalayer.v1.MutationResponse
	(*BeginTransactionRequest)(nil),  // 23: datalayer.v1.BeginTransactionRequest
	(*BeginTransactionResponse)(nil), // 24: datalayer.v1.BeginTransactionResponse
	(*TransactionRequest)(nil),       // 25: datalayer.v1.TransactionRequest
	(*ListTablesRequest)(nil),        // 26: datalayer.v1.ListTablesRequest
	(*ListTablesResponse)(nil),       // 27: datalayer.v1.ListTablesResponse
	(*DescribeTableRequest)(nil),     // 28: datalayer.v1.DescribeTableRequest
	(*ColumnMetadata)(nil),           // 29: datalayer.v1.ColumnMetadata
	(*IndexMetadata)(nil),            // 30: datalayer.v1.IndexMetadata
	(*DescribeTableResponse)(nil),    // 31: datalayer.v1.DescribeTableResponse
	nil,                              // 32: datalayer.v1.Row.FieldsEntry
	(*structpb.Value)(nil),           // 33: google.protobuf.Value
	(*emptypb.Empty)(nil),            // 34: google.protobuf.Empty
}
var file_api_datalayer_v1_datalayer_proto_depIdxs = []int32{
	32, // 0: datalayer.v1.Row.fields:type_name -> datalayer.v1.Row.FieldsEntry
	1,  // 1: datalayer.v1.Condition.operator:type_name -> datalayer.v1.Operator
	33, // 2: datalayer.v1.Condition.literal_value:type_name -> google.protobuf.Value
	17, // 3: datalayer.v1.Condition.subquery_value:type_name -> datalayer.v1.QueryRequest
	8,  // 4: datalayer.v1.WhereClause.condition:type_name -> datalayer.v1.Condition
	10, // 5: datalayer.v1.WhereClause.nested_clause:type_name -> datalayer.v1.NestedClause
	2,  // 6: datalayer.v1.NestedClause.logical_operator:type_name -> datalayer.v1.LogicalOperator
	9,  // 7: datalayer.v1.NestedClause.clauses:type_name -> datalayer.v1.WhereClause
	0,  // 8: datalayer.v1.OrderBy.direction:type_name -> datalayer.v1.SortDirection
	1,  // 9: datalayer.v1.FieldComparison.operator:type_name -> datalayer.v1.Operator
	4,  // 10: datalayer.v1.Join.type:type_name -> datalayer.v1.JoinType
	12, // 11: datalayer.v1.Join.on_conditions:type_name -> datalayer.v1.FieldComparison
	6,  // 12: datalayer.v1.Aggregation.function:type_name -> datalayer.v1.Aggregation.Function
	16, // 13: datalayer.v1.QueryRequest.table:type_name -> datalayer.v1.TableSchema
	14, // 14: datalayer.v1.QueryRequest.aggregations:type_name -> datalayer.v1.Aggregation
	9,  // 15: datalayer.v1.QueryRequest.where_clause:type_name -> datalayer.v1.WhereClause
	13, // 16: datalayer.v1.QueryRequest.joins:type_name -> datalayer.v1.Join
	15, // 17: datalayer.v1.QueryRequest.group_by:type_name -> datalayer.v1.GroupBy
	9,  // 18: datalayer.v1.QueryRequest.having_clause:type_name -> datalayer.v1.WhereClause
	11, // 19: datalayer.v1.QueryRequest.order_by:type_name -> datalayer.v1.OrderBy
	5,  // 20: datalayer.v1.QueryRequest.redis_db:type_name -> datalayer.v1.RedisDB
	7,  // 21: datalayer.v1.QueryResponse.rows:type_name -> datalayer.v1.Row
	16, // 22: datalayer.v1.InsertRequest.table:type_name -> datalayer.v1.TableSchema
	7,  // 23: datalayer.v1.InsertRequest.rows:type_name -> datalayer.v1.Row
	3,  // 24: datalayer.v1.InsertRequest.on_conflict:type_name -> datalayer.v1.ConflictAction
	16, // 25: datalayer.v1.UpdateRequest.table:type_name -> datalayer.v1.TableSchema
	7,  // 26: datalayer.v1.UpdateRequest.data:type_name -> datalayer.v1.Row
	9,  // 27: datalayer.v1.UpdateRequest.where_clause:type_name -> datalayer.v1.WhereClause
	5,  // 28: datalayer.v1.UpdateRequest.redis_db:type_name -> datalayer.v1.RedisDB
	16, // 29: datalayer.v1.DeleteRequest.table:type_name -> datalayer.v1.TableSchema
	9,  // 30: datalayer.v1.DeleteRequest.where_clause:type_name -> datalayer.v1.WhereClause
	5,  // 31: datalayer.v1.DeleteRequest.redis_db:type_name -> datalayer.v1.RedisDB
	16, // 32: datalayer.v1.DescribeTableRequest.table:type_name -> datalayer.v1.TableSchema
	29, // 33: datalayer.v1.DescribeTableResponse.columns:type_name -> datalayer.v1.ColumnMetadata
	30, // 34: datalayer.v1.DescribeTableResponse.indices:type_name -> datalayer.v1.IndexMetadata
	33, // 35: datalayer.v1.Row.FieldsEntry.value:type_name -> google.protobuf.Value
	17, // 36: datalayer.v1.DataCRUD.Query:input_type -> datalayer.v1.QueryRequest
	19, // 37: datalayer.v1.DataCRUD.Insert:input_type -> datalayer.v1.InsertRequest
	20, // 38: datalayer.v1.DataCRUD.Update:input_type -> datalayer.v1.UpdateRequest
	21, // 39: datalayer.v1.DataCRUD.Delete:input_type -> datalayer.v1.DeleteRequest
	23, // 40: datalayer.v1.DataCRUD.BeginTransaction:input_type -> datalayer.v1.BeginTransactionRequest
	25, // 41: datalayer.v1.DataCRUD.CommitTransaction:input_type -> datalayer.v1.TransactionRequest
	25, // 42: datalayer.v1.DataCRUD.RollbackTransaction:input_type -> datalayer.v1.TransactionRequest
	26, // 43: datalayer.v1.Metadata.ListTables:input_type -> datalayer.v1.ListTablesRequest
	28, // 44: datalayer.v1.Metadata.DescribeTable:input_type -> datalayer.v1.DescribeTableRequest
	18, // 45: datalayer.v1.DataCRUD.Query:output_type -> datalayer.v1.QueryResponse
	22, // 46: datalayer.v1.DataCRUD.Insert:output_type -> datalayer.v1.MutationResponse
	22, // 47: datalayer.v1.DataCRUD.Update:output_type -> datalayer.v1.MutationResponse
	22, // 48: datalayer.v1.DataCRUD.Delete:output_type -> datalayer.v1.MutationResponse
	24, // 49: datalayer.v1.DataCRUD.BeginTransaction:output_type -> datalayer.v1.BeginTransactionResponse
	34, // 50: datalayer.v1.DataCRUD.CommitTransaction:output_type -> google.protobuf.Empty
	34, // 51: datalayer.v1.DataCRUD.RollbackTransaction:output_type -> google.protobuf.Empty
	27, // 52: datalayer.v1.Metadata.ListTables:output_type -> datalayer.v1.ListTablesResponse
	31, // 53: datalayer.v1.Metadata.DescribeTable:output_type -> datalayer.v1.DescribeTableResponse
	45, // [45:54] is the sub-list for method output_type
	36, // [36:45] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_api_datalayer_v1_datalayer_proto_init() }
func file_api_datalayer_v1_datalayer_proto_init() {
	if File_api_datalayer_v1_datalayer_proto != nil {
		return
	}
	file_api_datalayer_v1_datalayer_proto_msgTypes[1].OneofWrappers = []any{
		(*Condition_LiteralValue)(nil),
		(*Condition_SubqueryValue)(nil),
	}
	file_api_datalayer_v1_datalayer_proto_msgTypes[2].OneofWrappers = []any{
		(*WhereClause_Condition)(nil),
		(*WhereClause_NestedClause)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_datalayer_v1_datalayer_proto_rawDesc), len(file_api_datalayer_v1_datalayer_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_datalayer_v1_datalayer_proto_goTypes,
		DependencyIndexes: file_api_datalayer_v1_datalayer_proto_depIdxs,
		EnumInfos:         file_api_datalayer_v1_datalayer_proto_enumTypes,
		MessageInfos:      file_api_datalayer_v1_datalayer_proto_msgTypes,
	}.Build()
	File_api_datalayer_v1_datalayer_proto = out.File
	file_api_datalayer_v1_datalayer_proto_goTypes = nil
	file_api_datalayer_v1_datalayer_proto_depIdxs = nil
}
